(() => {
  const $ = (s,el=document)=>el.querySelector(s);
  const $$=(s,el=document)=>Array.from(el.querySelectorAll(s));
  const storeKey='lifequest_v1';
  const DIFF={Trivial:5,Easy:10,Medium:25,Hard:50,Epic:100};
  const BONUS={Ranger:{Explore:1.1},Barbarian:{Wellbeing:1.1},Bard:{Community:1.1,Creative:1.1},Druid:{Daily:1.1},Rogue:{Work:1.1}};
  const state={hero:{name:'Stewart',cls:'Ranger'},xp:0,quests:[],streak:0,lastDoneDate:null,badges:[],neighborhoods:[],questsDone:0,filter:'all',search:''};
  const save=()=>localStorage.setItem(storeKey,JSON.stringify(state));
  const load=()=>{try{Object.assign(state,JSON.parse(localStorage.getItem(storeKey)||'{}'))}catch{}};
  const level=(xp)=>{let l=1,need=100,total=0;while(xp>=total+need){total+=need;l++;need=100*l}return{l,next:total+need,into:xp-total,span:need}};
  const fmt=d=>new Date(d).toISOString().slice(0,10);
  function header(){const {l,next,into,span}=level(state.xp);$('#level').textContent=l;$('#xpText').textContent=state.xp;$('#nextXp').textContent=next;$('#xpFill').style.width=Math.round(100*(into/span))+'%';}
  function stats(){$('#streak').textContent=state.streak||0;$('#questsDone').textContent=state.questsDone||0;$('#neighCount').textContent=(state.neighborhoods||[]).length;$('#badgeCount').textContent=(state.badges||[]).length;}
  function render(){const list=$('#questList');list.innerHTML='';let qs=state.quests.slice();if(state.filter!=='all')qs=qs.filter(q=>q.category===state.filter);if(state.search){const s=state.search.toLowerCase();qs=qs.filter(q=>(q.title+q.notes).toLowerCase().includes(s))}$('#emptyState').style.display=qs.length?'none':'block';qs.forEach(q=>{const n=$('#questItemTpl').content.firstElementChild.cloneNode(true);n.querySelector('.quest-title').textContent=q.title;const meta=[];meta.push(q.category+' • '+q.difficulty+' • '+(DIFF[q.difficulty]||0)+' XP');if(q.neighbourhood)meta.push('📍 '+q.neighbourhood);if(q.due)meta.push('⏳ '+q.due);if(q.notes)meta.push('🗒 '+q.notes);n.querySelector('.quest-meta').textContent=meta.join('   ');n.querySelector('.complete').onclick=()=>complete(q.id);n.querySelector('.delete').onclick=()=>del(q.id);n.querySelector('.edit').onclick=()=>edit(q.id);list.appendChild(n);});}
  function bonus(cat,base){return Math.round(base*((BONUS[state.hero.cls]||{})[cat]||1));}
  function complete(id){const i=state.quests.findIndex(q=>q.id===id);if(i===-1)return;const q=state.quests[i];const gain=bonus(q.category,DIFF[q.difficulty]||0);state.xp+=gain;state.quests.splice(i,1);state.questsDone=(state.questsDone||0)+1;const today=fmt(new Date());if(state.lastDoneDate){const diff=Math.floor((new Date(today)-new Date(fmt(state.lastDoneDate)))/86400000);state.streak=diff===1?(state.streak||0)+1:diff===0?state.streak:1}else state.streak=1;state.lastDoneDate=today;if(q.neighbourhood){const s=new Set(state.neighborhoods||[]);s.add(q.neighbourhood.trim());state.neighborhoods=[...s]}badges();save();header();stats();render();toast('+'+gain+' XP — Quest Complete!');}
  function badges(){const add=(c,n)=>{if(!state.badges.find(b=>b.code===c)){state.badges.push({code:c,name:n,date:new Date().toISOString()});toast('🏅 '+n)}};const {l}=level(state.xp);if(l>=5)add('lvl5','Level 5: Streetwise');if(l>=10)add('lvl10','Level 10: City Stalwart');if((state.neighborhoods||[]).length>=5)add('neigh5','Explorer I');if((state.neighborhoods||[]).length>=12)add('neigh12','Explorer II');if((state.questsDone||0)>=25)add('q25','Taskmaster I');if((state.questsDone||0)>=100)add('q100','Taskmaster II');if((state.streak||0)>=7)add('streak7','Weekly Streak');if((state.streak||0)>=30)add('streak30','Monthly Streak');}
  function add(d){state.quests.push({id:Math.random().toString(36).slice(2,9),title:d.title.trim(),category:d.category,difficulty:d.difficulty,neighbourhood:d.neighbourhood?.trim()||'',due:d.due||'',notes:d.notes?.trim()||'',createdAt:Date.now()});save();render();}
  function del(id){state.quests=state.quests.filter(q=>q.id!==id);save();render();}
  function edit(id){const q=state.quests.find(x=>x.id===id);if(!q)return;const t=prompt('Edit title:',q.title);if(t===null)return;q.title=t.trim();const c=prompt('Edit category (Daily/Work/Explore/Wellbeing/Community/Creative):',q.category);if(c)q.category=c;const d=prompt('Edit difficulty (Trivial/Easy/Medium/Hard/Epic):',q.difficulty);if(d)q.difficulty=d;const n=prompt('Edit neighbourhood:',q.neighbourhood);if(n!==null)q.neighbourhood=n;const due=prompt('Edit due (YYYY-MM-DD):',q.due);if(due!==null)q.due=due;const notes=prompt('Edit notes:',q.notes);if(notes!==null)q.notes=notes;save();render();}
  function toast(m){const dlg=document.getElementById('toast');document.getElementById('toastMsg').textContent=m;dlg.showModal();setTimeout(()=>dlg.close(),1200)}
  function bind(){document.getElementById('questForm').addEventListener('submit',e=>{e.preventDefault();add({title:document.getElementById('qTitle').value,category:document.getElementById('qCategory').value,difficulty:document.getElementById('qDifficulty').value,neighbourhood:document.getElementById('qNeighbourhood').value,due:document.getElementById('qDue').value,notes:document.getElementById('qNotes').value});e.target.reset();});document.getElementById('addSample').addEventListener('click',()=>{const t=new Date().toISOString().slice(0,10);[{title:'Morning cold plunge + stretch',category:'Wellbeing',difficulty:'Medium',neighbourhood:'',due:t,notes:'Breathing + 3x30s plank'},{title:'Scout a new ravine trail',category:'Explore',difficulty:'Medium',neighbourhood:'Don Valley',due:'',notes:'Map a loop, time it'},{title:'Update resume bullet for bartending',category:'Work',difficulty:'Easy',neighbourhood:'',due:t,notes:'Metric + action verb'},{title:'Library recon & card check',category:'Daily',difficulty:'Trivial',neighbourhood:'TPL',due:'',notes:'Grab holds; find creative room'},{title:'Open mic night story',category:'Community',difficulty:'Hard',neighbourhood:'Kensington',due:'',notes:'5-min set'},{title:'Forge a poem draft',category:'Creative',difficulty:'Easy',neighbourhood:'',due:'',notes:'4 lines, vivid image'}].forEach(add);toast('Sample quests added!')});document.getElementById('openSettings').onclick=()=>document.getElementById('settingsDialog').showModal();document.getElementById('saveSettings').onclick=()=>{state.hero.name=document.getElementById('heroName').value||'Stewart';state.hero.cls=document.getElementById('heroClass').value;save();all();};document.getElementById('exportBtn').onclick=()=>{const url=URL.createObjectURL(new Blob([JSON.stringify(state,null,2)],{type:'application/json'}));const a=document.createElement('a');a.href=url;a.download='lifequest-data.json';a.click();URL.revokeObjectURL(url);};document.getElementById('importFile').addEventListener('change',e=>{const f=e.target.files[0];if(!f)return;const r=new FileReader();r.onload=ev=>{try{Object.assign(state,JSON.parse(ev.target.result));save();all();toast('Data imported!')}catch(err){alert('Import failed: '+err.message)}};r.readAsText(f);});document.getElementById('resetBtn').onclick=()=>{if(confirm('Wipe local data?')){localStorage.removeItem(storeKey);location.reload();}};document.getElementById('tabs').addEventListener('click',e=>{const b=e.target.closest('button.tab');if(!b)return;$$('.tab').forEach(t=>t.classList.remove('active'));b.classList.add('active');state.filter=b.dataset.filter;render();});document.getElementById('search').oninput=e=>{state.search=e.target.value;render();};window.addEventListener('beforeunload',e=>{if((state.quests||[]).length>0){e.preventDefault();e.returnValue='';}});}
  function settings(){document.getElementById('heroName').value=state.hero.name||'';document.getElementById('heroClass').value=state.hero.cls||'Ranger';}
  function all(){header();stats();render();settings();}
  if('serviceWorker' in navigator){window.addEventListener('load',()=>navigator.serviceWorker.register('./sw.js').catch(()=>{}));}
  load();bind();all();
})();